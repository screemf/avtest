{"name": "test_delete_post[test_no_avtor-000p;lko-False]", "status": "failed", "statusDetails": {"message": "AssertionError: Ожидалась ошибка для test_no_avtor СотрудинкFalse, но получен статус: 200\nassert 200 in [403, 404, 500]\n +  where 200 = <Response [200]>.status_code", "trace": "username = 'test_no_avtor', password = '000p;lko', staff = False\n\n    @pytest.mark.parametrize(\n        \"username, password, staff\",\n        [\n            (\"admin\", \"000p;lko\", True),#Админ,Автор\n            (\"test_no_avtor\", \"000p;lko\", False),#Не автор, нет прав на удаление\n            (\"Ostap\", \"000olkji\", False),#Не админ, Автор, нет  прав на создание\n        ]\n    )\n    @allure.epic(\"Посты\")\n    @allure.feature('API: Удаление поста ')\n    def test_delete_post(username, password,staff):\n        post_id=get_max_post_id()\n        result = get_csrf_token_delete(username, password, post_id)\n        csrf_token = result['csrfmiddlewaretoken']\n        cookies = result['cookies']\n    \n        session = requests.Session()\n        session.cookies.update(cookies)\n        session.cookies.set('csrftoken', csrf_token)\n    \n        data = {\n                'csrfmiddlewaretoken': csrf_token,\n            }\n    \n        headers = {\n                'Accept': 'application/x-www-form-urlencoded',\n                'User-Agent': 'Mozilla/5.0 ...',\n                'X-CSRFToken': csrf_token,\n            }\n    \n        with allure.step(f\"Удаление поста от {username}.Сотрудинк {staff}\"):\n                response = session.post(\n                    f\"{BASE_URL}/blog/post/{post_id}/delete\",\n                    headers=headers,\n                    data=data,\n                )\n    \n                allure.attach(str(response.status_code), name=\"Код ответа\")\n                allure.attach(response.text, name=\"Ответ сервера\")\n    \n                if staff:\n                    if response.status_code == 500:\n                        pytest.fail(f\"Ошибка сервера (500): {response.text}\")\n                    assert response.status_code in [200, 302], (\n                        f\"Удаление поста от  {username} Сотрудник {staff} не удалось, статус: {response.status_code}\"\n                    )\n                else:\n>                   assert response.status_code in [403, 404, 500], (\n                        f\"Ожидалась ошибка для {username} Сотрудинк{staff}, но получен статус: {response.status_code}\"\n                    )\nE                   AssertionError: Ожидалась ошибка для test_no_avtor СотрудинкFalse, но получен статус: 200\nE                   assert 200 in [403, 404, 500]\nE                    +  where 200 = <Response [200]>.status_code\n\nPost_test.py:568: AssertionError"}, "steps": [{"name": "Удаление поста от test_no_avtor.Сотрудинк False", "status": "failed", "statusDetails": {"message": "AssertionError: Ожидалась ошибка для test_no_avtor СотрудинкFalse, но получен статус: 200\nassert 200 in [403, 404, 500]\n +  where 200 = <Response [200]>.status_code\n", "trace": "  File \"C:\\Users\\scree\\PycharmProjects\\pythonProject_AQA\\Test\\Post_test.py\", line 568, in test_delete_post\n    assert response.status_code in [403, 404, 500], (\n"}, "attachments": [{"name": "Код ответа", "source": "e250377f-a808-4c4e-8ab2-6a9d43c9d465-attachment.attach"}, {"name": "Ответ сервера", "source": "8c1cfe20-dd08-427f-82b8-23edd08718b0-attachment.attach"}], "start": 1750711546813, "stop": 1750711548095}], "parameters": [{"name": "username", "value": "'test_no_avtor'"}, {"name": "password", "value": "'000p;lko'"}, {"name": "staff", "value": "False"}], "start": 1750711544686, "stop": 1750711548096, "uuid": "86e6e4a9-07cc-4112-9918-0670a48abc97", "historyId": "74448a19e3dd68202b1012c6a1c2f7a4", "testCaseId": "c0d9bf9faa4256ad13607595d6547f39", "fullName": "Post_test#test_delete_post", "labels": [{"name": "epic", "value": "Посты"}, {"name": "feature", "value": "API: Удаление поста "}, {"name": "suite", "value": "Post_test"}, {"name": "host", "value": "LAPTOP-AFAHUU77"}, {"name": "thread", "value": "36444-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Post_test"}]}